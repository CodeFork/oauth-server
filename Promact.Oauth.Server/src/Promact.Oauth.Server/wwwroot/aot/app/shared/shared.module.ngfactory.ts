/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '../../../app/shared/shared.module';
import * as import2 from '@angular/common/src/common_module';
import * as import3 from '@angular/forms/src/directives';
import * as import4 from '@angular/forms/src/form_providers';
import * as import5 from '@angular2-material/core/ripple/ripple';
import * as import6 from '@angular2-material/button/button';
import * as import7 from '@angular2-material/toolbar/toolbar';
import * as import8 from '@angular2-material/sidenav/sidenav';
import * as import9 from '@angular2-material/input/input';
import * as import10 from '@angular2-material/checkbox/checkbox';
import * as import11 from 'md2/accordion/accordion';
import * as import12 from 'md2/autocomplete/autocomplete';
import * as import13 from 'md2/chips/chips';
import * as import14 from 'md2/collapse/collapse';
import * as import15 from 'md2/colorpicker/colorpicker';
import * as import16 from 'md2/data-table/data-table';
import * as import17 from 'md2/datepicker/datepicker';
import * as import18 from 'md2/dialog/dialog';
import * as import19 from 'md2/menu/menu';
import * as import20 from 'md2/multiselect/multiselect';
import * as import21 from 'md2/select/select';
import * as import22 from 'md2/tabs/tabs';
import * as import23 from 'md2/tags/tags';
import * as import24 from 'md2/toast/toast';
import * as import25 from 'md2/tooltip/tooltip';
import * as import26 from 'md2/core/portal/portal-directives';
import * as import27 from 'md2/core/overlay/overlay-directives';
import * as import28 from 'md2/core/rtl/dir';
import * as import29 from 'md2/core/a11y/index';
import * as import30 from 'md2/core/projection/projection';
import * as import31 from 'md2/core/compatibility/style-compatibility';
import * as import32 from 'md2/module';
import * as import33 from '@angular/common/src/localization';
import * as import34 from '@angular/forms/src/directives/radio_control_value_accessor';
import * as import35 from 'md2/colorpicker/calculateColor';
import * as import36 from '@angular/core/src/di/injector';
import * as import37 from '../../node_modules/md2/toast/toast.ngfactory';
import * as import38 from '../../node_modules/md2/tooltip/tooltip.ngfactory';
import * as import39 from '@angular/core/src/i18n/tokens';
class SharedModuleInjector extends import0.NgModuleInjector<import1.SharedModule> {
  _CommonModule_0:import2.CommonModule;
  _InternalFormsSharedModule_1:import3.InternalFormsSharedModule;
  _FormsModule_2:import4.FormsModule;
  _MdRippleModule_3:import5.MdRippleModule;
  _MdButtonModule_4:import6.MdButtonModule;
  _MdToolbarModule_5:import7.MdToolbarModule;
  _MdSidenavModule_6:import8.MdSidenavModule;
  _MdInputModule_7:import9.MdInputModule;
  _MdCheckboxModule_8:import10.MdCheckboxModule;
  _Md2AccordionModule_9:import11.Md2AccordionModule;
  _Md2AutocompleteModule_10:import12.Md2AutocompleteModule;
  _Md2ChipsModule_11:import13.Md2ChipsModule;
  _Md2CollapseModule_12:import14.Md2CollapseModule;
  _Md2ColorpickerModule_13:import15.Md2ColorpickerModule;
  _Md2DataTableModule_14:import16.Md2DataTableModule;
  _Md2DatepickerModule_15:import17.Md2DatepickerModule;
  _Md2DialogModule_16:import18.Md2DialogModule;
  _Md2MenuModule_17:import19.Md2MenuModule;
  _Md2MultiselectModule_18:import20.Md2MultiselectModule;
  _Md2SelectModule_19:import21.Md2SelectModule;
  _Md2TabsModule_20:import22.Md2TabsModule;
  _Md2TagsModule_21:import23.Md2TagsModule;
  _Md2ToastModule_22:import24.Md2ToastModule;
  _Md2TooltipModule_23:import25.Md2TooltipModule;
  _PortalModule_24:import26.PortalModule;
  _OverlayModule_25:import27.OverlayModule;
  _RtlModule_26:import28.RtlModule;
  _A11yModule_27:import29.A11yModule;
  _ProjectionModule_28:import30.ProjectionModule;
  _StyleCompatibilityModule_29:import31.StyleCompatibilityModule;
  _Md2Module_30:import32.Md2Module;
  _SharedModule_31:import1.SharedModule;
  __NgLocalization_32:import33.NgLocaleLocalization;
  __RadioControlRegistry_33:import34.RadioControlRegistry;
  __ColorpickerService_34:import35.ColorpickerService;
  constructor(parent:import36.Injector) {
    super(parent,[
      import37.Md2ToastComponentNgFactory,
      import38.Md2TooltipComponentNgFactory
    ]
    ,([] as any[]));
  }
  get _NgLocalization_32():import33.NgLocaleLocalization {
    if ((this.__NgLocalization_32 == (null as any))) { (this.__NgLocalization_32 = new import33.NgLocaleLocalization(this.parent.get(import39.LOCALE_ID))); }
    return this.__NgLocalization_32;
  }
  get _RadioControlRegistry_33():import34.RadioControlRegistry {
    if ((this.__RadioControlRegistry_33 == (null as any))) { (this.__RadioControlRegistry_33 = new import34.RadioControlRegistry()); }
    return this.__RadioControlRegistry_33;
  }
  get _ColorpickerService_34():import35.ColorpickerService {
    if ((this.__ColorpickerService_34 == (null as any))) { (this.__ColorpickerService_34 = new import35.ColorpickerService()); }
    return this.__ColorpickerService_34;
  }
  createInternal():import1.SharedModule {
    this._CommonModule_0 = new import2.CommonModule();
    this._InternalFormsSharedModule_1 = new import3.InternalFormsSharedModule();
    this._FormsModule_2 = new import4.FormsModule();
    this._MdRippleModule_3 = new import5.MdRippleModule();
    this._MdButtonModule_4 = new import6.MdButtonModule();
    this._MdToolbarModule_5 = new import7.MdToolbarModule();
    this._MdSidenavModule_6 = new import8.MdSidenavModule();
    this._MdInputModule_7 = new import9.MdInputModule();
    this._MdCheckboxModule_8 = new import10.MdCheckboxModule();
    this._Md2AccordionModule_9 = new import11.Md2AccordionModule();
    this._Md2AutocompleteModule_10 = new import12.Md2AutocompleteModule();
    this._Md2ChipsModule_11 = new import13.Md2ChipsModule();
    this._Md2CollapseModule_12 = new import14.Md2CollapseModule();
    this._Md2ColorpickerModule_13 = new import15.Md2ColorpickerModule();
    this._Md2DataTableModule_14 = new import16.Md2DataTableModule();
    this._Md2DatepickerModule_15 = new import17.Md2DatepickerModule();
    this._Md2DialogModule_16 = new import18.Md2DialogModule();
    this._Md2MenuModule_17 = new import19.Md2MenuModule();
    this._Md2MultiselectModule_18 = new import20.Md2MultiselectModule();
    this._Md2SelectModule_19 = new import21.Md2SelectModule();
    this._Md2TabsModule_20 = new import22.Md2TabsModule();
    this._Md2TagsModule_21 = new import23.Md2TagsModule();
    this._Md2ToastModule_22 = new import24.Md2ToastModule();
    this._Md2TooltipModule_23 = new import25.Md2TooltipModule();
    this._PortalModule_24 = new import26.PortalModule();
    this._OverlayModule_25 = new import27.OverlayModule();
    this._RtlModule_26 = new import28.RtlModule();
    this._A11yModule_27 = new import29.A11yModule();
    this._ProjectionModule_28 = new import30.ProjectionModule();
    this._StyleCompatibilityModule_29 = new import31.StyleCompatibilityModule();
    this._Md2Module_30 = new import32.Md2Module();
    this._SharedModule_31 = new import1.SharedModule();
    return this._SharedModule_31;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.CommonModule)) { return this._CommonModule_0; }
    if ((token === import3.InternalFormsSharedModule)) { return this._InternalFormsSharedModule_1; }
    if ((token === import4.FormsModule)) { return this._FormsModule_2; }
    if ((token === import5.MdRippleModule)) { return this._MdRippleModule_3; }
    if ((token === import6.MdButtonModule)) { return this._MdButtonModule_4; }
    if ((token === import7.MdToolbarModule)) { return this._MdToolbarModule_5; }
    if ((token === import8.MdSidenavModule)) { return this._MdSidenavModule_6; }
    if ((token === import9.MdInputModule)) { return this._MdInputModule_7; }
    if ((token === import10.MdCheckboxModule)) { return this._MdCheckboxModule_8; }
    if ((token === import11.Md2AccordionModule)) { return this._Md2AccordionModule_9; }
    if ((token === import12.Md2AutocompleteModule)) { return this._Md2AutocompleteModule_10; }
    if ((token === import13.Md2ChipsModule)) { return this._Md2ChipsModule_11; }
    if ((token === import14.Md2CollapseModule)) { return this._Md2CollapseModule_12; }
    if ((token === import15.Md2ColorpickerModule)) { return this._Md2ColorpickerModule_13; }
    if ((token === import16.Md2DataTableModule)) { return this._Md2DataTableModule_14; }
    if ((token === import17.Md2DatepickerModule)) { return this._Md2DatepickerModule_15; }
    if ((token === import18.Md2DialogModule)) { return this._Md2DialogModule_16; }
    if ((token === import19.Md2MenuModule)) { return this._Md2MenuModule_17; }
    if ((token === import20.Md2MultiselectModule)) { return this._Md2MultiselectModule_18; }
    if ((token === import21.Md2SelectModule)) { return this._Md2SelectModule_19; }
    if ((token === import22.Md2TabsModule)) { return this._Md2TabsModule_20; }
    if ((token === import23.Md2TagsModule)) { return this._Md2TagsModule_21; }
    if ((token === import24.Md2ToastModule)) { return this._Md2ToastModule_22; }
    if ((token === import25.Md2TooltipModule)) { return this._Md2TooltipModule_23; }
    if ((token === import26.PortalModule)) { return this._PortalModule_24; }
    if ((token === import27.OverlayModule)) { return this._OverlayModule_25; }
    if ((token === import28.RtlModule)) { return this._RtlModule_26; }
    if ((token === import29.A11yModule)) { return this._A11yModule_27; }
    if ((token === import30.ProjectionModule)) { return this._ProjectionModule_28; }
    if ((token === import31.StyleCompatibilityModule)) { return this._StyleCompatibilityModule_29; }
    if ((token === import32.Md2Module)) { return this._Md2Module_30; }
    if ((token === import1.SharedModule)) { return this._SharedModule_31; }
    if ((token === import33.NgLocalization)) { return this._NgLocalization_32; }
    if ((token === import34.RadioControlRegistry)) { return this._RadioControlRegistry_33; }
    if ((token === import35.ColorpickerService)) { return this._ColorpickerService_34; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const SharedModuleNgFactory:import0.NgModuleFactory<import1.SharedModule> = new import0.NgModuleFactory(SharedModuleInjector,import1.SharedModule);